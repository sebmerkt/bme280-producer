<project xmlns="http://maven.apache.org/POM/4.0.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
      <groupId>io.confluent</groupId>
      <artifactId>rest-utils-parent</artifactId>
      <version>6.0.0</version>
  </parent>

  <artifactId>bme280-producer</artifactId>
  <packaging>jar</packaging>

  <description>
     Producer for sending BME280 sensor data
  </description>

  <properties>
    <!-- Keep versions as properties to allow easy modification -->
    <java.version>1.8</java.version>
    <!-- Maven properties for compilation -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <checkstyle.suppressions.location>checkstyle/suppressions.xml</checkstyle.suppressions.location>
  </properties>

  <repositories>
    <repository>
      <id>confluent</id>
      <name>Confluent</name>
      <url>https://packages.confluent.io/maven/</url>
    </repository>
  </repositories>

  <pluginRepositories>
    <pluginRepository>
      <id>confluent</id>
      <url>https://packages.confluent.io/maven/</url>
    </pluginRepository>
  </pluginRepositories>

  <dependencies>
      <dependency>
          <groupId>com.pi4j</groupId>
          <artifactId>pi4j-core</artifactId>
          <version>1.4</version>
      </dependency>
    <dependency>
      <groupId>org.apache.kafka</groupId>
      <artifactId>kafka-clients</artifactId>
      <version>${kafka.version}</version>
    </dependency>
      <dependency>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
          <version>4.12</version>
          <scope>test</scope>
      </dependency>
      <dependency>
          <groupId>io.confluent</groupId>
          <artifactId>kafka-avro-serializer</artifactId>
          <version>${confluent.version}</version>
      </dependency>
      <dependency>
          <groupId>io.confluent</groupId>
          <artifactId>kafka-streams-avro-serde</artifactId>
          <version>${confluent.version}</version>
      </dependency>
      <dependency>
          <groupId>org.apache.kafka</groupId>
          <artifactId>kafka-streams</artifactId>
          <version>${kafka.version}</version>
      </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.3</version>
        <configuration>
          <source>${java.version}</source>
          <target>${java.version}</target>
          <compilerArgs>
            <arg>-Xlint:all</arg>
          </compilerArgs>
        </configuration>
      </plugin>
<!--        Create shade jar file-->
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-shade-plugin</artifactId>
            <executions>
                <execution>
                    <id>build-V1</id>
                    <goals>
                        <goal>shade</goal>
                    </goals>
                    <configuration>
                        <shadedArtifactAttached>true</shadedArtifactAttached>
                        <transformers>
                            <transformer implementation=
                                                 "org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                <mainClass>com.sensors.Producer</mainClass>
                            </transformer>
                        </transformers>
                        <finalName>Producer</finalName>
                    </configuration>
                </execution>
            </executions>
        </plugin>
        <plugin>
            <groupId>org.apache.avro</groupId>
            <artifactId>avro-maven-plugin</artifactId>
            <version>${avro.version}</version>
            <executions>
                <execution>
                    <phase>generate-sources</phase>
                    <goals>
                        <goal>schema</goal>
                    </goals>
                    <configuration>
                        <sourceDirectory>src/main/resources/com/sensors/</sourceDirectory>
                        <includes>
                            <include>measurement_data.avsc</include>
                        </includes>
                        <outputDirectory>${project.build.directory}/generated-sources</outputDirectory>
                    </configuration>
                </execution>
            </executions>
        </plugin>
        <plugin>
            <groupId>io.confluent</groupId>
            <artifactId>kafka-schema-registry-maven-plugin</artifactId>
            <version>${confluent.version}</version>
            <configuration>
                <schemaRegistryUrls>
                    <param>http://localhost:8081</param>
                </schemaRegistryUrls>
                <subjects>
                    <transactions-value>src/main/resources/com/sensors/measurement_data.avsc</transactions-value>
                </subjects>
                <outputDirectory/>
            </configuration>
            <goals>
                <goal>test-compatibility</goal>
            </goals>
        </plugin>
      <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-checkstyle-plugin</artifactId>
          <executions>
              <!--
               This declaration merges with the one in the parent, rather
               than overriding it, so we need to disable the "validate" phase
               execution that the parent declares and declare our own
               during "test-compile".

               One reason for this is that avro codegen runs during compile,
               and while it's not strictly a precondition, it's
               confusing to address style violations while the IDE is telling you
               that some generated class doesn't exist. Test-compile is the first phase
               that's guaranteed to run after compile and before any unit or integration
               tests.

               Also, we want to disable the parent's configuration because it declares stuff
               we don't care about, like suppressions. (Honestly, it shouldn't)
               -->
              <execution>
                  <id>validate</id>
                  <phase>none</phase>
                  <configuration>
                      <skip>true</skip>
                  </configuration>
              </execution>
              <execution>
                  <id>test-compile</id>
                  <phase>test-compile</phase>
                  <configuration>
                      <encoding>UTF-8</encoding>
                      <consoleOutput>true</consoleOutput>
                      <failsOnError>true</failsOnError>
                      <failOnViolation>true</failOnViolation>
                      <includeResources>false</includeResources>
                      <includeTestResources>false</includeTestResources>
                      <includeTestSourceDirectory>true</includeTestSourceDirectory>
                      <excludes>com/sensors/**</excludes>
                      <configLocation>checkstyle.xml</configLocation>
                  </configuration>
                  <goals>
                      <goal>check</goal>
                  </goals>
              </execution>
          </executions>
      </plugin>
    </plugins>
  </build>
</project>
